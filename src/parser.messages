mod_: ASSERT STRING COMMA STRING WHILE
##
## Ends in an error in state: 119.
##
## assert_message -> COMMA expr . [ SEMICOLON NEWLINE ]
## expr -> expr . OPAND expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . OPOR expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . OPEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . OPNEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . OPLT expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . OPLTEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . OPGT expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . OPGTEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . OPMUL expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . OPDIV expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . OPEDIV expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . OPMOD expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . OPADD expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . OPSUB expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT ]
##
## The known suffix of the stack is as follows:
## COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: ASSERT STRING COMMA WHILE
##
## Ends in an error in state: 118.
##
## assert_message -> COMMA . expr [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: ASSERT STRING WHILE
##
## Ends in an error in state: 117.
##
## expr -> expr . OPAND expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPOR expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPNEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPLT expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPLTEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPGT expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPGTEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPMUL expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPDIV expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPEDIV expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPMOD expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPADD expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPSUB expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE LPAREN LBRACK IF DOT COMMA ]
## small_stmt -> ASSERT expr . assert_message [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## ASSERT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: ASSERT WHILE
##
## Ends in an error in state: 116.
##
## small_stmt -> ASSERT . expr assert_message [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## ASSERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DEF IDENTIFIER LPAREN IDENTIFIER COLON
##
## Ends in an error in state: 176.
##
## compound_stmt -> DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) . RPAREN COLON suite [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production separated_nonempty_list(COMMA,IDENTIFIER) -> IDENTIFIER 
## In state 12, spurious reduction of production loption(separated_nonempty_list(COMMA,IDENTIFIER)) -> separated_nonempty_list(COMMA,IDENTIFIER) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DEF IDENTIFIER LPAREN RPAREN COLON WHILE
##
## Ends in an error in state: 178.
##
## compound_stmt -> DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON . suite [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DEF IDENTIFIER LPAREN RPAREN WHILE
##
## Ends in an error in state: 177.
##
## compound_stmt -> DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN . COLON suite [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DEF IDENTIFIER LPAREN WHILE
##
## Ends in an error in state: 175.
##
## compound_stmt -> DEF IDENTIFIER LPAREN . loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON suite [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## DEF IDENTIFIER LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DEF IDENTIFIER WHILE
##
## Ends in an error in state: 174.
##
## compound_stmt -> DEF IDENTIFIER . LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON suite [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## DEF IDENTIFIER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DEF WHILE
##
## Ends in an error in state: 173.
##
## compound_stmt -> DEF . IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON suite [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## DEF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DELETE WHILE
##
## Ends in an error in state: 112.
##
## small_stmt -> DELETE . expr_or_tuple [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## DELETE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: FOR STRING IN STRING COLON STRING NEWLINE SUBEQ
##
## Ends in an error in state: 171.
##
## compound_stmt -> FOR expr_or_tuple IN expr COLON suite . orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## FOR expr_or_tuple IN expr COLON suite
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: FOR STRING IN STRING COLON WHILE
##
## Ends in an error in state: 170.
##
## compound_stmt -> FOR expr_or_tuple IN expr COLON . suite orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## FOR expr_or_tuple IN expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: FOR STRING IN STRING WHILE
##
## Ends in an error in state: 169.
##
## compound_stmt -> FOR expr_or_tuple IN expr . COLON suite orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPLT expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPLTEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPGT expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPGTEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPEDIV expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPMOD expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
##
## The known suffix of the stack is as follows:
## FOR expr_or_tuple IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: FOR STRING IN WHILE
##
## Ends in an error in state: 168.
##
## compound_stmt -> FOR expr_or_tuple IN . expr COLON suite orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## FOR expr_or_tuple IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: FOR STRING SUBEQ
##
## Ends in an error in state: 167.
##
## compound_stmt -> FOR expr_or_tuple . IN expr COLON suite orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## FOR expr_or_tuple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production expr_or_tuple -> expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: FOR WHILE
##
## Ends in an error in state: 166.
##
## compound_stmt -> FOR . expr_or_tuple IN expr COLON suite orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## FOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON NEWLINE INDENT STRING NEWLINE SUBEQ
##
## Ends in an error in state: 180.
##
## nonempty_list(stmt) -> stmt . [ DEDENT ]
## nonempty_list(stmt) -> stmt . nonempty_list(stmt) [ DEDENT ]
##
## The known suffix of the stack is as follows:
## stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON NEWLINE INDENT SUBEQ
##
## Ends in an error in state: 108.
##
## suite -> NEWLINE INDENT . nonempty_list(stmt) DEDENT [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## NEWLINE INDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON NEWLINE WHILE
##
## Ends in an error in state: 107.
##
## suite -> NEWLINE . INDENT nonempty_list(stmt) DEDENT [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## NEWLINE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON STRING NEWLINE ELIF STRING COLON BOOL NEWLINE SUBEQ
##
## Ends in an error in state: 164.
##
## list(elif) -> elif . list(elif) [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER ELSE DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## elif
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON STRING NEWLINE ELIF STRING COLON WHILE
##
## Ends in an error in state: 124.
##
## elif -> ELIF expr COLON . suite [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## ELIF expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON STRING NEWLINE ELIF STRING WHILE
##
## Ends in an error in state: 123.
##
## elif -> ELIF expr . COLON suite [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPLT expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPLTEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPGT expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPGTEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPEDIV expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPMOD expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
##
## The known suffix of the stack is as follows:
## ELIF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON STRING NEWLINE ELIF WHILE
##
## Ends in an error in state: 122.
##
## elif -> ELIF . expr COLON suite [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## ELIF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON STRING NEWLINE SUBEQ
##
## Ends in an error in state: 121.
##
## compound_stmt -> IF expr COLON suite . list(elif) orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## IF expr COLON suite
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON WHILE
##
## Ends in an error in state: 111.
##
## compound_stmt -> IF expr COLON . suite list(elif) orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## IF expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING WHILE
##
## Ends in an error in state: 110.
##
## compound_stmt -> IF expr . COLON suite list(elif) orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPLT expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPLTEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPGT expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPGTEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPEDIV expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPMOD expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
##
## The known suffix of the stack is as follows:
## IF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF WHILE
##
## Ends in an error in state: 109.
##
## compound_stmt -> IF . expr COLON suite list(elif) orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LAMBDA COLON STRING WHILE
##
## Ends in an error in state: 19.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> LAMBDA loption(separated_nonempty_list(COMMA,IDENTIFIER)) COLON expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## LAMBDA loption(separated_nonempty_list(COMMA,IDENTIFIER)) COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LAMBDA COLON WHILE
##
## Ends in an error in state: 14.
##
## expr -> LAMBDA loption(separated_nonempty_list(COMMA,IDENTIFIER)) COLON . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## LAMBDA loption(separated_nonempty_list(COMMA,IDENTIFIER)) COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LAMBDA IDENTIFIER COMMA WHILE
##
## Ends in an error in state: 10.
##
## separated_nonempty_list(COMMA,IDENTIFIER) -> IDENTIFIER COMMA . separated_nonempty_list(COMMA,IDENTIFIER) [ RPAREN COLON ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LAMBDA IDENTIFIER RPAREN
##
## Ends in an error in state: 13.
##
## expr -> LAMBDA loption(separated_nonempty_list(COMMA,IDENTIFIER)) . COLON expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## LAMBDA loption(separated_nonempty_list(COMMA,IDENTIFIER))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production separated_nonempty_list(COMMA,IDENTIFIER) -> IDENTIFIER 
## In state 12, spurious reduction of production loption(separated_nonempty_list(COMMA,IDENTIFIER)) -> separated_nonempty_list(COMMA,IDENTIFIER) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LAMBDA IDENTIFIER WHILE
##
## Ends in an error in state: 9.
##
## separated_nonempty_list(COMMA,IDENTIFIER) -> IDENTIFIER . [ RPAREN COLON ]
## separated_nonempty_list(COMMA,IDENTIFIER) -> IDENTIFIER . COMMA separated_nonempty_list(COMMA,IDENTIFIER) [ RPAREN COLON ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LAMBDA WHILE
##
## Ends in an error in state: 8.
##
## expr -> LAMBDA . loption(separated_nonempty_list(COMMA,IDENTIFIER)) COLON expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## LAMBDA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACE STRING COLON BOOL COMMA WHILE
##
## Ends in an error in state: 74.
##
## separated_nonempty_list(COMMA,key_value) -> key_value COMMA . separated_nonempty_list(COMMA,key_value) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## key_value COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACE STRING COLON STRING WHILE
##
## Ends in an error in state: 78.
##
## expr -> expr . OPAND expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPOR expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPEQ expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPNEQ expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPLT expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPLTEQ expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPGT expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPGTEQ expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPMUL expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPDIV expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPEDIV expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPMOD expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPADD expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPSUB expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . IF expr ELSE expr [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . DOT IDENTIFIER [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## key_value -> expr COLON expr . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## expr COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACE STRING COLON WHILE
##
## Ends in an error in state: 77.
##
## key_value -> expr COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACE STRING WHILE
##
## Ends in an error in state: 76.
##
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPLT expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPLTEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPGT expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPGTEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPEDIV expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPMOD expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## key_value -> expr . COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACE WHILE
##
## Ends in an error in state: 7.
##
## expr -> LBRACE . loption(separated_nonempty_list(COMMA,key_value)) RBRACE [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING COMMA BOOL RPAREN
##
## Ends in an error in state: 79.
##
## expr -> LBRACK loption(separated_nonempty_list(COMMA,expr)) . RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## LBRACK loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 69, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) 
## In state 27, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING COMMA WHILE
##
## Ends in an error in state: 68.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN RBRACK ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING FOR STRING IN STRING FOR STRING IN STRING WHILE
##
## Ends in an error in state: 93.
##
## expr -> expr . OPAND expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPOR expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPNEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPLT expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPLTEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPGT expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPGTEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPMUL expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPDIV expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPEDIV expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPMOD expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPADD expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPSUB expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . IF expr ELSE expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . DOT IDENTIFIER [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## fors -> FOR expr_or_tuple IN expr . ifs fors [ RBRACK ]
##
## The known suffix of the stack is as follows:
## FOR expr_or_tuple IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING FOR STRING IN STRING FOR STRING IN WHILE
##
## Ends in an error in state: 92.
##
## fors -> FOR expr_or_tuple IN . expr ifs fors [ RBRACK ]
##
## The known suffix of the stack is as follows:
## FOR expr_or_tuple IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING FOR STRING IN STRING FOR STRING SUBEQ
##
## Ends in an error in state: 91.
##
## fors -> FOR expr_or_tuple . IN expr ifs fors [ RBRACK ]
##
## The known suffix of the stack is as follows:
## FOR expr_or_tuple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production expr_or_tuple -> expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING FOR STRING IN STRING FOR WHILE
##
## Ends in an error in state: 90.
##
## fors -> FOR . expr_or_tuple IN expr ifs fors [ RBRACK ]
##
## The known suffix of the stack is as follows:
## FOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING FOR STRING IN STRING IF STRING WHILE
##
## Ends in an error in state: 87.
##
## expr -> expr . OPAND expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . OPOR expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . OPEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . OPNEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . OPLT expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . OPLTEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . OPGT expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . OPGTEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . OPMUL expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . OPDIV expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . OPEDIV expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . OPMOD expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . OPADD expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . OPSUB expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . IF expr ELSE expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr IF expr . ELSE expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . DOT IDENTIFIER [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## ifs -> IF expr . ifs [ RBRACK FOR ]
##
## The known suffix of the stack is as follows:
## expr IF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING FOR STRING IN STRING IF WHILE
##
## Ends in an error in state: 86.
##
## expr -> expr IF . expr ELSE expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR ELSE DOT ]
## ifs -> IF . expr ifs [ RBRACK FOR ]
##
## The known suffix of the stack is as follows:
## expr IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING FOR STRING IN STRING WHILE
##
## Ends in an error in state: 85.
##
## expr -> expr . OPAND expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPOR expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPNEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPLT expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPLTEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPGT expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPGTEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPMUL expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPDIV expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPEDIV expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPMOD expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPADD expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . OPSUB expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . IF expr ELSE expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> expr . DOT IDENTIFIER [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
## expr -> LBRACK expr FOR expr_or_tuple IN expr . ifs fors RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT ]
##
## The known suffix of the stack is as follows:
## LBRACK expr FOR expr_or_tuple IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING FOR STRING IN WHILE
##
## Ends in an error in state: 84.
##
## expr -> LBRACK expr FOR expr_or_tuple IN . expr ifs fors RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## LBRACK expr FOR expr_or_tuple IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING FOR STRING SUBEQ
##
## Ends in an error in state: 83.
##
## expr -> LBRACK expr FOR expr_or_tuple . IN expr ifs fors RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## LBRACK expr FOR expr_or_tuple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production expr_or_tuple -> expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING FOR WHILE
##
## Ends in an error in state: 82.
##
## expr -> LBRACK expr FOR . expr_or_tuple IN expr ifs fors RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## LBRACK expr FOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING WHILE
##
## Ends in an error in state: 81.
##
## expr -> expr . OPAND expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . OPOR expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . OPEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . OPNEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . OPLT expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . OPLTEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . OPGT expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . OPGTEQ expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . OPMUL expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . OPDIV expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . OPEDIV expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . OPMOD expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . OPADD expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . OPSUB expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . IF expr ELSE expr [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> expr . DOT IDENTIFIER [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## expr -> LBRACK expr . FOR expr_or_tuple IN expr ifs fors RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF FOR DOT COMMA ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RBRACK ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RBRACK ]
##
## The known suffix of the stack is as follows:
## LBRACK expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK WHILE
##
## Ends in an error in state: 6.
##
## expr -> LBRACK . loption(separated_nonempty_list(COMMA,expr)) RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> LBRACK . expr FOR expr_or_tuple IN expr ifs fors RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LPAREN STRING SUBEQ
##
## Ends in an error in state: 98.
##
## expr -> LPAREN expr_or_tuple . RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## LPAREN expr_or_tuple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production expr_or_tuple -> expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LPAREN WHILE
##
## Ends in an error in state: 5.
##
## expr -> LPAREN . expr_or_tuple RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: NEWLINE SUBEQ
##
## Ends in an error in state: 190.
##
## list(newline_or_stmt) -> newline_or_stmt . list(newline_or_stmt) [ ENDMARKER ]
##
## The known suffix of the stack is as follows:
## newline_or_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: OPADD STRING WHILE
##
## Ends in an error in state: 100.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> OPADD expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## OPADD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: OPADD WHILE
##
## Ends in an error in state: 4.
##
## expr -> OPADD . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## OPADD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: OPSUB STRING WHILE
##
## Ends in an error in state: 101.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> OPSUB expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## OPSUB expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: OPSUB WHILE
##
## Ends in an error in state: 3.
##
## expr -> OPSUB . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## OPSUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: PASS WHILE
##
## Ends in an error in state: 126.
##
## simple_stmt -> small_stmt . NEWLINE [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
## simple_stmt -> small_stmt . SEMICOLON simple_stmt_or_empty [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## small_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: RETURN WHILE
##
## Ends in an error in state: 104.
##
## flow_stmt -> RETURN . [ SEMICOLON NEWLINE ]
## flow_stmt -> RETURN . expr_or_tuple [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING ADDEQ WHILE
##
## Ends in an error in state: 153.
##
## small_stmt -> expr_or_tuple ADDEQ . expr_or_tuple [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr_or_tuple ADDEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING COMMA STRING COMMA WHILE
##
## Ends in an error in state: 66.
##
## expr_or_tuple_or_empty -> expr COMMA . expr_or_tuple_or_empty [ SUBEQ SEMICOLON RPAREN RBRACK NEWLINE MULEQ MODEQ IN EQUAL EDIVEQ DIVEQ ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING COMMA STRING WHILE
##
## Ends in an error in state: 65.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr_or_tuple_or_empty -> expr . [ SUBEQ SEMICOLON RPAREN RBRACK NEWLINE MULEQ MODEQ IN EQUAL EDIVEQ DIVEQ ADDEQ ]
## expr_or_tuple_or_empty -> expr . COMMA expr_or_tuple_or_empty [ SUBEQ SEMICOLON RPAREN RBRACK NEWLINE MULEQ MODEQ IN EQUAL EDIVEQ DIVEQ ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING COMMA WHILE
##
## Ends in an error in state: 63.
##
## expr_or_tuple -> expr COMMA . expr_or_tuple_or_empty [ SUBEQ SEMICOLON RPAREN RBRACK NEWLINE MULEQ MODEQ IN EQUAL EDIVEQ DIVEQ ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING DIVEQ WHILE
##
## Ends in an error in state: 151.
##
## small_stmt -> expr_or_tuple DIVEQ . expr_or_tuple [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr_or_tuple DIVEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING DOT WHILE
##
## Ends in an error in state: 51.
##
## expr -> expr DOT . IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING EDIVEQ WHILE
##
## Ends in an error in state: 149.
##
## small_stmt -> expr_or_tuple EDIVEQ . expr_or_tuple [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr_or_tuple EDIVEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING EQUAL STRING EQUAL STRING EQUAL WHILE
##
## Ends in an error in state: 146.
##
## separated_nonempty_list(EQUAL,expr_or_tuple) -> expr_or_tuple EQUAL . separated_nonempty_list(EQUAL,expr_or_tuple) [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr_or_tuple EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING EQUAL STRING EQUAL STRING SUBEQ
##
## Ends in an error in state: 145.
##
## separated_nonempty_list(EQUAL,expr_or_tuple) -> expr_or_tuple . [ SEMICOLON NEWLINE ]
## separated_nonempty_list(EQUAL,expr_or_tuple) -> expr_or_tuple . EQUAL separated_nonempty_list(EQUAL,expr_or_tuple) [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr_or_tuple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production expr_or_tuple -> expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING EQUAL STRING EQUAL WHILE
##
## Ends in an error in state: 142.
##
## assign_right -> EQUAL . loption(separated_nonempty_list(EQUAL,expr_or_tuple)) [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING EQUAL STRING SUBEQ
##
## Ends in an error in state: 141.
##
## small_stmt -> expr_or_tuple EQUAL expr_or_tuple . assign_right [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr_or_tuple EQUAL expr_or_tuple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production expr_or_tuple -> expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING EQUAL WHILE
##
## Ends in an error in state: 140.
##
## small_stmt -> expr_or_tuple EQUAL . expr_or_tuple assign_right [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr_or_tuple EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING IF STRING ELSE STRING WHILE
##
## Ends in an error in state: 62.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr IF expr ELSE expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr IF expr ELSE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING IF STRING ELSE WHILE
##
## Ends in an error in state: 61.
##
## expr -> expr IF expr ELSE . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr IF expr ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING IF STRING WHILE
##
## Ends in an error in state: 60.
##
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . OPLT expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . OPLTEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . OPGT expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . OPGTEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . OPEDIV expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . OPMOD expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr IF expr . ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF ELSE DOT ]
##
## The known suffix of the stack is as follows:
## expr IF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING IF WHILE
##
## Ends in an error in state: 59.
##
## expr -> expr IF . expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING LBRACK STRING SUBEQ
##
## Ends in an error in state: 42.
##
## expr -> expr LBRACK expr_or_tuple . RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr LBRACK expr_or_tuple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production expr_or_tuple -> expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING LBRACK WHILE
##
## Ends in an error in state: 41.
##
## expr -> expr LBRACK . expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING LPAREN STRING RBRACK
##
## Ends in an error in state: 28.
##
## expr -> expr LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 27, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING LPAREN STRING WHILE
##
## Ends in an error in state: 30.
##
## expr -> expr . OPAND expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPOR expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPEQ expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPNEQ expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPLT expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPLTEQ expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPGT expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPGTEQ expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPMUL expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPDIV expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPEDIV expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPMOD expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPADD expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . OPSUB expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . IF expr ELSE expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . DOT IDENTIFIER [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COMMA ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN RBRACK ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN RBRACK ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING LPAREN WHILE
##
## Ends in an error in state: 26.
##
## expr -> expr LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING MODEQ WHILE
##
## Ends in an error in state: 138.
##
## small_stmt -> expr_or_tuple MODEQ . expr_or_tuple [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr_or_tuple MODEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING MULEQ WHILE
##
## Ends in an error in state: 136.
##
## small_stmt -> expr_or_tuple MULEQ . expr_or_tuple [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr_or_tuple MULEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPADD STRING WHILE
##
## Ends in an error in state: 54.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPADD expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPADD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPADD WHILE
##
## Ends in an error in state: 53.
##
## expr -> expr OPADD . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPADD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPAND STRING WHILE
##
## Ends in an error in state: 58.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPAND expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPAND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPAND WHILE
##
## Ends in an error in state: 57.
##
## expr -> expr OPAND . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPDIV STRING WHILE
##
## Ends in an error in state: 50.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPDIV expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPDIV expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPDIV WHILE
##
## Ends in an error in state: 49.
##
## expr -> expr OPDIV . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPDIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPEDIV STRING WHILE
##
## Ends in an error in state: 40.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPEDIV expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPEDIV expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPEDIV WHILE
##
## Ends in an error in state: 39.
##
## expr -> expr OPEDIV . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPEDIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPEQ STRING WHILE
##
## Ends in an error in state: 56.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPEQ expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPEQ WHILE
##
## Ends in an error in state: 55.
##
## expr -> expr OPEQ . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPGT STRING WHILE
##
## Ends in an error in state: 48.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPGT expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPGT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPGT WHILE
##
## Ends in an error in state: 47.
##
## expr -> expr OPGT . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPGT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPGTEQ STRING WHILE
##
## Ends in an error in state: 38.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPGTEQ expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPGTEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPGTEQ WHILE
##
## Ends in an error in state: 37.
##
## expr -> expr OPGTEQ . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPGTEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPLT STRING WHILE
##
## Ends in an error in state: 46.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPLT expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPLT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPLT WHILE
##
## Ends in an error in state: 45.
##
## expr -> expr OPLT . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPLT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPLTEQ STRING WHILE
##
## Ends in an error in state: 36.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPLTEQ expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPLTEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPLTEQ WHILE
##
## Ends in an error in state: 35.
##
## expr -> expr OPLTEQ . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPLTEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPMOD STRING WHILE
##
## Ends in an error in state: 25.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPMOD expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPMOD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPMOD WHILE
##
## Ends in an error in state: 24.
##
## expr -> expr OPMOD . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPMOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPMUL STRING WHILE
##
## Ends in an error in state: 23.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPMUL expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPMUL expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPMUL WHILE
##
## Ends in an error in state: 22.
##
## expr -> expr OPMUL . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPMUL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPNEQ STRING WHILE
##
## Ends in an error in state: 34.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPNEQ expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPNEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPNEQ WHILE
##
## Ends in an error in state: 33.
##
## expr -> expr OPNEQ . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPNEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPOR STRING WHILE
##
## Ends in an error in state: 32.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPOR expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPOR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPOR WHILE
##
## Ends in an error in state: 31.
##
## expr -> expr OPOR . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPSUB STRING WHILE
##
## Ends in an error in state: 21.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr OPSUB expr . [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPSUB expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPSUB WHILE
##
## Ends in an error in state: 20.
##
## expr -> expr OPSUB . expr [ SUBEQ SEMICOLON RPAREN RBRACK RBRACE OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF FOR EQUAL ELSE EDIVEQ DOT DIVEQ COMMA COLON ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr OPSUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING RPAREN
##
## Ends in an error in state: 133.
##
## small_stmt -> expr_or_tuple . [ SEMICOLON NEWLINE ]
## small_stmt -> expr_or_tuple . EQUAL expr_or_tuple assign_right [ SEMICOLON NEWLINE ]
## small_stmt -> expr_or_tuple . ADDEQ expr_or_tuple [ SEMICOLON NEWLINE ]
## small_stmt -> expr_or_tuple . SUBEQ expr_or_tuple [ SEMICOLON NEWLINE ]
## small_stmt -> expr_or_tuple . MULEQ expr_or_tuple [ SEMICOLON NEWLINE ]
## small_stmt -> expr_or_tuple . DIVEQ expr_or_tuple [ SEMICOLON NEWLINE ]
## small_stmt -> expr_or_tuple . EDIVEQ expr_or_tuple [ SEMICOLON NEWLINE ]
## small_stmt -> expr_or_tuple . MODEQ expr_or_tuple [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr_or_tuple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production expr_or_tuple -> expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING SEMICOLON PASS WHILE
##
## Ends in an error in state: 129.
##
## simple_stmt_or_empty -> small_stmt . NEWLINE [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
## simple_stmt_or_empty -> small_stmt . SEMICOLON simple_stmt_or_empty [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## small_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING SEMICOLON STRING SEMICOLON WHILE
##
## Ends in an error in state: 130.
##
## simple_stmt_or_empty -> small_stmt SEMICOLON . simple_stmt_or_empty [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## small_stmt SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING SEMICOLON WHILE
##
## Ends in an error in state: 127.
##
## simple_stmt -> small_stmt SEMICOLON . simple_stmt_or_empty [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## small_stmt SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING SUBEQ WHILE
##
## Ends in an error in state: 134.
##
## small_stmt -> expr_or_tuple SUBEQ . expr_or_tuple [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr_or_tuple SUBEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING WHILE
##
## Ends in an error in state: 44.
##
## expr -> expr . OPAND expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPOR expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPNEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPLT expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPLTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPGT expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPGTEQ expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPMUL expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPEDIV expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPMOD expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPADD expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . OPSUB expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . IF expr ELSE expr [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . DOT IDENTIFIER [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ SUBEQ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD NEWLINE MULEQ MODEQ LPAREN LBRACK IN IF EQUAL EDIVEQ DOT DIVEQ COMMA ADDEQ ]
## expr_or_tuple -> expr . [ SUBEQ SEMICOLON RPAREN RBRACK NEWLINE MULEQ MODEQ IN EQUAL EDIVEQ DIVEQ ADDEQ ]
## expr_or_tuple -> expr . COMMA expr_or_tuple_or_empty [ SUBEQ SEMICOLON RPAREN RBRACK NEWLINE MULEQ MODEQ IN EQUAL EDIVEQ DIVEQ ADDEQ ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: SUBEQ
##
## Ends in an error in state: 0.
##
## mod_' -> . mod_ [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: WHILE STRING COLON STRING NEWLINE ELSE COLON WHILE
##
## Ends in an error in state: 161.
##
## orelse -> ELSE COLON . suite [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## ELSE COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: WHILE STRING COLON STRING NEWLINE ELSE WHILE
##
## Ends in an error in state: 160.
##
## orelse -> ELSE . COLON suite [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: WHILE STRING COLON STRING NEWLINE SUBEQ
##
## Ends in an error in state: 186.
##
## compound_stmt -> WHILE expr COLON suite . orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## WHILE expr COLON suite
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: WHILE STRING COLON WHILE
##
## Ends in an error in state: 103.
##
## compound_stmt -> WHILE expr COLON . suite orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## WHILE expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: WHILE STRING WHILE
##
## Ends in an error in state: 102.
##
## compound_stmt -> WHILE expr . COLON suite orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPLT expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPLTEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPGT expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPGTEQ expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPEDIV expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPMOD expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
## expr -> expr . LBRACK expr_or_tuple RBRACK [ OPSUB OPOR OPNEQ OPMUL OPMOD OPLTEQ OPLT OPGTEQ OPGT OPEQ OPEDIV OPDIV OPAND OPADD LPAREN LBRACK IF DOT COLON ]
##
## The known suffix of the stack is as follows:
## WHILE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: WHILE WHILE
##
## Ends in an error in state: 1.
##
## compound_stmt -> WHILE . expr COLON suite orelse [ WHILE STRING RETURN PASS OPSUB OPADD NEWLINE LPAREN LBRACK LBRACE LAMBDA INTEGER IF IDENTIFIER FOR FLOAT ENDMARKER DELETE DEF DEDENT CONTINUE BREAK BOOL ASSERT ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

