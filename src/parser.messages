mod_: DEF IDENTIFIER LPAREN IDENTIFIER COMMA WHILE
##
## Ends in an error in state: 83.
##
## separated_nonempty_list(COMMA,IDENTIFIER) -> IDENTIFIER COMMA . separated_nonempty_list(COMMA,IDENTIFIER) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DEF IDENTIFIER LPAREN IDENTIFIER WHILE
##
## Ends in an error in state: 82.
##
## separated_nonempty_list(COMMA,IDENTIFIER) -> IDENTIFIER . [ RPAREN ]
## separated_nonempty_list(COMMA,IDENTIFIER) -> IDENTIFIER . COMMA separated_nonempty_list(COMMA,IDENTIFIER) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DEF IDENTIFIER LPAREN RPAREN COLON WHILE
##
## Ends in an error in state: 88.
##
## compound_stmt -> DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON . suite [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DEF IDENTIFIER LPAREN RPAREN WHILE
##
## Ends in an error in state: 87.
##
## compound_stmt -> DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN . COLON suite [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DEF IDENTIFIER LPAREN WHILE
##
## Ends in an error in state: 81.
##
## compound_stmt -> DEF IDENTIFIER LPAREN . loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON suite [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## DEF IDENTIFIER LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DEF IDENTIFIER WHILE
##
## Ends in an error in state: 80.
##
## compound_stmt -> DEF IDENTIFIER . LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON suite [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## DEF IDENTIFIER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DEF WHILE
##
## Ends in an error in state: 79.
##
## compound_stmt -> DEF . IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON suite [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## DEF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DELETE STRING WHILE
##
## Ends in an error in state: 52.
##
## expr -> expr . OPAND expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPOR expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPNEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPMUL expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPDIV expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPADD expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPSUB expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## small_stmt -> DELETE expr . [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## DELETE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: DELETE WHILE
##
## Ends in an error in state: 51.
##
## small_stmt -> DELETE . expr [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## DELETE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON NEWLINE INDENT SEMICOLON
##
## Ends in an error in state: 47.
##
## suite -> NEWLINE INDENT . nonempty_list(stmt) DEDENT [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## NEWLINE INDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON NEWLINE INDENT STRING NEWLINE SEMICOLON
##
## Ends in an error in state: 90.
##
## nonempty_list(stmt) -> stmt . [ DEDENT ]
## nonempty_list(stmt) -> stmt . nonempty_list(stmt) [ DEDENT ]
##
## The known suffix of the stack is as follows:
## stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON NEWLINE WHILE
##
## Ends in an error in state: 46.
##
## suite -> NEWLINE . INDENT nonempty_list(stmt) DEDENT [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## NEWLINE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON STRING NEWLINE ELIF STRING COLON BOOL NEWLINE SEMICOLON
##
## Ends in an error in state: 77.
##
## list(elif) -> elif . list(elif) [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER ELSE DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## elif
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON STRING NEWLINE ELIF STRING COLON WHILE
##
## Ends in an error in state: 56.
##
## elif -> ELIF expr COLON . suite [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## ELIF expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON STRING NEWLINE ELIF STRING WHILE
##
## Ends in an error in state: 55.
##
## elif -> ELIF expr . COLON suite [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT BOOL ]
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
##
## The known suffix of the stack is as follows:
## ELIF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON STRING NEWLINE ELIF WHILE
##
## Ends in an error in state: 54.
##
## elif -> ELIF . expr COLON suite [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER ELSE ELIF DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## ELIF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON STRING NEWLINE SEMICOLON
##
## Ends in an error in state: 53.
##
## compound_stmt -> IF expr COLON suite . list(elif) orelse [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr COLON suite
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING COLON WHILE
##
## Ends in an error in state: 50.
##
## compound_stmt -> IF expr COLON . suite list(elif) orelse [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF STRING WHILE
##
## Ends in an error in state: 49.
##
## compound_stmt -> IF expr . COLON suite list(elif) orelse [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
##
## The known suffix of the stack is as follows:
## IF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: IF WHILE
##
## Ends in an error in state: 48.
##
## compound_stmt -> IF . expr COLON suite list(elif) orelse [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING COMMA WHILE
##
## Ends in an error in state: 38.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN RBRACK ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING RPAREN
##
## Ends in an error in state: 10.
##
## expr -> LBRACK loption(separated_nonempty_list(COMMA,expr)) . RBRACK [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACK loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 12, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 9, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK STRING WHILE
##
## Ends in an error in state: 12.
##
## expr -> expr . OPAND expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPOR expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPEQ expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPNEQ expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPMUL expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPDIV expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPADD expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPSUB expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . IF expr ELSE expr [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . DOT IDENTIFIER [ RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN RBRACK ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN RBRACK ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LBRACK WHILE
##
## Ends in an error in state: 4.
##
## expr -> LBRACK . loption(separated_nonempty_list(COMMA,expr)) RBRACK [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LPAREN STRING WHILE
##
## Ends in an error in state: 40.
##
## expr -> expr . OPAND expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPOR expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPNEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPMUL expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPDIV expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPADD expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPSUB expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . IF expr ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . DOT IDENTIFIER [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> LPAREN expr . RPAREN [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: LPAREN WHILE
##
## Ends in an error in state: 3.
##
## expr -> LPAREN . expr RPAREN [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: NEWLINE SEMICOLON
##
## Ends in an error in state: 100.
##
## list(newline_or_stmt) -> newline_or_stmt . list(newline_or_stmt) [ ENDMARKER ]
##
## The known suffix of the stack is as follows:
## newline_or_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: RETURN STRING WHILE
##
## Ends in an error in state: 45.
##
## expr -> expr . OPAND expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPOR expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPNEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPMUL expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPDIV expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPADD expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPSUB expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## flow_stmt -> RETURN expr . [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## RETURN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: RETURN WHILE
##
## Ends in an error in state: 44.
##
## flow_stmt -> RETURN . [ SEMICOLON NEWLINE ]
## flow_stmt -> RETURN . expr [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: SEMICOLON
##
## Ends in an error in state: 0.
##
## mod_' -> . mod_ [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING DOT WHILE
##
## Ends in an error in state: 22.
##
## expr -> expr DOT . IDENTIFIER [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING EQUAL STRING WHILE
##
## Ends in an error in state: 64.
##
## expr -> expr . OPAND expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPOR expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPNEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPMUL expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPDIV expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPADD expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . OPSUB expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF DOT ]
## small_stmt -> expr EQUAL expr . [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr EQUAL expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING EQUAL WHILE
##
## Ends in an error in state: 63.
##
## small_stmt -> expr EQUAL . expr [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING IF STRING ELSE STRING WHILE
##
## Ends in an error in state: 37.
##
## expr -> expr . OPAND expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr IF expr ELSE expr . [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr IF expr ELSE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING IF STRING ELSE WHILE
##
## Ends in an error in state: 36.
##
## expr -> expr IF expr ELSE . expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr IF expr ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING IF STRING WHILE
##
## Ends in an error in state: 35.
##
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr IF expr . ELSE expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
##
## The known suffix of the stack is as follows:
## expr IF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING IF WHILE
##
## Ends in an error in state: 34.
##
## expr -> expr IF . expr ELSE expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING LPAREN STRING RBRACK
##
## Ends in an error in state: 20.
##
## expr -> expr LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 12, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 9, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING LPAREN WHILE
##
## Ends in an error in state: 19.
##
## expr -> expr LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPADD STRING WHILE
##
## Ends in an error in state: 31.
##
## expr -> expr . OPAND expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr OPADD expr . [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPADD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPADD WHILE
##
## Ends in an error in state: 30.
##
## expr -> expr OPADD . expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPADD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPAND STRING WHILE
##
## Ends in an error in state: 33.
##
## expr -> expr . OPAND expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr OPAND expr . [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPAND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPAND WHILE
##
## Ends in an error in state: 32.
##
## expr -> expr OPAND . expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPDIV STRING WHILE
##
## Ends in an error in state: 18.
##
## expr -> expr . OPAND expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr OPDIV expr . [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPDIV expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPDIV WHILE
##
## Ends in an error in state: 17.
##
## expr -> expr OPDIV . expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPDIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPEQ STRING WHILE
##
## Ends in an error in state: 29.
##
## expr -> expr . OPAND expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr OPEQ expr . [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPEQ WHILE
##
## Ends in an error in state: 28.
##
## expr -> expr OPEQ . expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPMUL STRING WHILE
##
## Ends in an error in state: 16.
##
## expr -> expr . OPAND expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr OPMUL expr . [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPMUL expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPMUL WHILE
##
## Ends in an error in state: 15.
##
## expr -> expr OPMUL . expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPMUL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPNEQ STRING WHILE
##
## Ends in an error in state: 27.
##
## expr -> expr . OPAND expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr OPNEQ expr . [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPNEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPNEQ WHILE
##
## Ends in an error in state: 26.
##
## expr -> expr OPNEQ . expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPNEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPOR STRING WHILE
##
## Ends in an error in state: 25.
##
## expr -> expr . OPAND expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr OPOR expr . [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPOR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPOR WHILE
##
## Ends in an error in state: 24.
##
## expr -> expr OPOR . expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPSUB STRING WHILE
##
## Ends in an error in state: 14.
##
## expr -> expr . OPAND expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr OPSUB expr . [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPSUB expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING OPSUB WHILE
##
## Ends in an error in state: 13.
##
## expr -> expr OPSUB . expr [ SEMICOLON RPAREN RBRACK OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPSUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING SEMICOLON WHILE
##
## Ends in an error in state: 59.
##
## semicolon_small_stmt -> SEMICOLON . small_stmt [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: STRING WHILE
##
## Ends in an error in state: 62.
##
## expr -> expr . OPAND expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL DOT ]
## expr -> expr . OPOR expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL DOT ]
## expr -> expr . OPEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL DOT ]
## expr -> expr . OPNEQ expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL DOT ]
## expr -> expr . OPMUL expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL DOT ]
## expr -> expr . OPDIV expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL DOT ]
## expr -> expr . OPADD expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL DOT ]
## expr -> expr . OPSUB expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL DOT ]
## expr -> expr . IF expr ELSE expr [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL DOT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL DOT ]
## expr -> expr . DOT IDENTIFIER [ SEMICOLON OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINE LPAREN IF EQUAL DOT ]
## small_stmt -> expr . [ SEMICOLON NEWLINE ]
## small_stmt -> expr . EQUAL expr [ SEMICOLON NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: WHILE STRING COLON STRING NEWLINE ELSE COLON WHILE
##
## Ends in an error in state: 74.
##
## orelse -> ELSE COLON . suite [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## ELSE COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: WHILE STRING COLON STRING NEWLINE ELSE WHILE
##
## Ends in an error in state: 73.
##
## orelse -> ELSE . COLON suite [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: WHILE STRING COLON STRING NEWLINE SEMICOLON
##
## Ends in an error in state: 96.
##
## compound_stmt -> WHILE expr COLON suite . orelse [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## WHILE expr COLON suite
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: WHILE STRING COLON WHILE
##
## Ends in an error in state: 43.
##
## compound_stmt -> WHILE expr COLON . suite orelse [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## WHILE expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: WHILE STRING WHILE
##
## Ends in an error in state: 42.
##
## compound_stmt -> WHILE expr . COLON suite orelse [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
##
## The known suffix of the stack is as follows:
## WHILE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

mod_: WHILE WHILE
##
## Ends in an error in state: 1.
##
## compound_stmt -> WHILE . expr COLON suite orelse [ WHILE STRING RETURN NEWLINE LPAREN LBRACK INTEGER IF IDENTIFIER FLOAT ENDMARKER DELETE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

