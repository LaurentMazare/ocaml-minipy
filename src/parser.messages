mod_: DEF IDENTIFIER LPAREN IDENTIFIER COMMA WHILE
##
## Ends in an error in state: 67.
##
## separated_nonempty_list(COMMA,IDENTIFIER) -> IDENTIFIER COMMA . separated_nonempty_list(COMMA,IDENTIFIER) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER COMMA
##

State 67.

mod_: DEF IDENTIFIER LPAREN IDENTIFIER WHILE
##
## Ends in an error in state: 66.
##
## separated_nonempty_list(COMMA,IDENTIFIER) -> IDENTIFIER . [ RPAREN ]
## separated_nonempty_list(COMMA,IDENTIFIER) -> IDENTIFIER . COMMA separated_nonempty_list(COMMA,IDENTIFIER) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

State 66.

mod_: DEF IDENTIFIER LPAREN RPAREN COLON WHILE
##
## Ends in an error in state: 72.
##
## stmt -> DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON . block [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON
##

State 72.

mod_: DEF IDENTIFIER LPAREN RPAREN WHILE
##
## Ends in an error in state: 71.
##
## stmt -> DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN . COLON block [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## DEF IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN
##

State 71.

mod_: DEF IDENTIFIER LPAREN WHILE
##
## Ends in an error in state: 65.
##
## stmt -> DEF IDENTIFIER LPAREN . loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON block [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## DEF IDENTIFIER LPAREN
##

State 65.

mod_: DEF IDENTIFIER WHILE
##
## Ends in an error in state: 64.
##
## stmt -> DEF IDENTIFIER . LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON block [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## DEF IDENTIFIER
##

State 64.

mod_: DEF WHILE
##
## Ends in an error in state: 63.
##
## stmt -> DEF . IDENTIFIER LPAREN loption(separated_nonempty_list(COMMA,IDENTIFIER)) RPAREN COLON block [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## DEF
##

State 63.

mod_: IDENTIFIER EQUAL STRING WHILE
##
## Ends in an error in state: 54.
##
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## stmt_ -> IDENTIFIER EQUAL expr . [ NEWLINES ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER EQUAL expr
##

State 54.

mod_: IDENTIFIER EQUAL WHILE
##
## Ends in an error in state: 53.
##
## stmt_ -> IDENTIFIER EQUAL . expr [ NEWLINES ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER EQUAL
##

State 53.

mod_: IDENTIFIER WHILE
##
## Ends in an error in state: 52.
##
## expr -> IDENTIFIER . [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## stmt_ -> IDENTIFIER . EQUAL expr [ NEWLINES ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

State 52.

mod_: IF STRING COLON STRING NEWLINES RPAREN
##
## Ends in an error in state: 58.
##
## stmt -> IF expr COLON block . orelse [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr COLON block
##

State 58.

mod_: IF STRING COLON WHILE
##
## Ends in an error in state: 51.
##
## stmt -> IF expr COLON . block orelse [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr COLON
##

State 51.

mod_: IF STRING WHILE
##
## Ends in an error in state: 50.
##
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## stmt -> IF expr . COLON block orelse [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## IF expr
##

State 50.

mod_: IF WHILE
##
## Ends in an error in state: 49.
##
## stmt -> IF . expr COLON block orelse [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## IF
##

State 49.

mod_: LPAREN STRING WHILE
##
## Ends in an error in state: 12.
##
## expr -> expr . OPAND expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPOR expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPNEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPMUL expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPDIV expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPADD expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . OPSUB expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . IF expr ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> expr . DOT IDENTIFIER [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT ]
## expr -> LPAREN expr . RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

State 12.

mod_: LPAREN WHILE
##
## Ends in an error in state: 7.
##
## expr -> LPAREN . expr RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

State 7.

mod_: NEWLINES RPAREN
##
## Ends in an error in state: 1.
##
## list(NEWLINES) -> NEWLINES . list(NEWLINES) [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF BOOL ]
##
## The known suffix of the stack is as follows:
## NEWLINES
##

State 1.

mod_: RETURN STRING WHILE
##
## Ends in an error in state: 46.
##
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## stmt_ -> RETURN expr . [ NEWLINES ]
##
## The known suffix of the stack is as follows:
## RETURN expr
##

State 46.

mod_: RETURN WHILE
##
## Ends in an error in state: 45.
##
## stmt_ -> RETURN . [ NEWLINES ]
## stmt_ -> RETURN . expr [ NEWLINES ]
##
## The known suffix of the stack is as follows:
## RETURN
##

State 45.

mod_: RPAREN
##
## Ends in an error in state: 0.
##
## mod_' -> . mod_ [ # ]
##
## The known suffix of the stack is as follows:
##
##

State 0.

mod_: STRING DOT WHILE
##
## Ends in an error in state: 33.
##
## expr -> expr DOT . IDENTIFIER [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

State 33.

mod_: STRING IF STRING ELSE STRING WHILE
##
## Ends in an error in state: 40.
##
## expr -> expr . OPAND expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr IF expr ELSE expr . [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr IF expr ELSE expr
##

State 40.

mod_: STRING IF STRING ELSE WHILE
##
## Ends in an error in state: 39.
##
## expr -> expr IF expr ELSE . expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr IF expr ELSE
##

State 39.

mod_: STRING IF STRING WHILE
##
## Ends in an error in state: 38.
##
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr IF expr . ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF ELSE DOT ]
##
## The known suffix of the stack is as follows:
## expr IF expr
##

State 38.

mod_: STRING IF WHILE
##
## Ends in an error in state: 37.
##
## expr -> expr IF . expr ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr IF
##

State 37.

mod_: STRING LPAREN STRING COMMA WHILE
##
## Ends in an error in state: 41.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

State 41.

mod_: STRING LPAREN STRING WHILE
##
## Ends in an error in state: 24.
##
## expr -> expr . OPAND expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPOR expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPNEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPMUL expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPDIV expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPADD expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . OPSUB expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . IF expr ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## expr -> expr . DOT IDENTIFIER [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COMMA ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##

State 24.

mod_: STRING LPAREN WHILE
##
## Ends in an error in state: 20.
##
## expr -> expr LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr LPAREN
##

State 20.

mod_: STRING NEWLINES RPAREN
##
## Ends in an error in state: 82.
##
## list(stmt) -> stmt . list(stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## stmt
##

State 82.

mod_: STRING OPADD STRING WHILE
##
## Ends in an error in state: 32.
##
## expr -> expr . OPAND expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr OPADD expr . [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPADD expr
##

State 32.

mod_: STRING OPADD WHILE
##
## Ends in an error in state: 31.
##
## expr -> expr OPADD . expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPADD
##

State 31.

mod_: STRING OPAND STRING WHILE
##
## Ends in an error in state: 36.
##
## expr -> expr . OPAND expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr OPAND expr . [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPAND expr
##

State 36.

mod_: STRING OPAND WHILE
##
## Ends in an error in state: 35.
##
## expr -> expr OPAND . expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPAND
##

State 35.

mod_: STRING OPDIV STRING WHILE
##
## Ends in an error in state: 19.
##
## expr -> expr . OPAND expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr OPDIV expr . [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPDIV expr
##

State 19.

mod_: STRING OPDIV WHILE
##
## Ends in an error in state: 18.
##
## expr -> expr OPDIV . expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPDIV
##

State 18.

mod_: STRING OPEQ STRING WHILE
##
## Ends in an error in state: 30.
##
## expr -> expr . OPAND expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr OPEQ expr . [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPEQ expr
##

State 30.

mod_: STRING OPEQ WHILE
##
## Ends in an error in state: 29.
##
## expr -> expr OPEQ . expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPEQ
##

State 29.

mod_: STRING OPMUL STRING WHILE
##
## Ends in an error in state: 17.
##
## expr -> expr . OPAND expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr OPMUL expr . [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPMUL expr
##

State 17.

mod_: STRING OPMUL WHILE
##
## Ends in an error in state: 16.
##
## expr -> expr OPMUL . expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPMUL
##

State 16.

mod_: STRING OPNEQ STRING WHILE
##
## Ends in an error in state: 28.
##
## expr -> expr . OPAND expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr OPNEQ expr . [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPNEQ expr
##

State 28.

mod_: STRING OPNEQ WHILE
##
## Ends in an error in state: 27.
##
## expr -> expr OPNEQ . expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPNEQ
##

State 27.

mod_: STRING OPOR STRING WHILE
##
## Ends in an error in state: 26.
##
## expr -> expr . OPAND expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr OPOR expr . [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPOR expr
##

State 26.

mod_: STRING OPOR WHILE
##
## Ends in an error in state: 25.
##
## expr -> expr OPOR . expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPOR
##

State 25.

mod_: STRING OPSUB STRING WHILE
##
## Ends in an error in state: 15.
##
## expr -> expr . OPAND expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPOR expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPNEQ expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPMUL expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPDIV expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPADD expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . OPSUB expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr OPSUB expr . [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . IF expr ELSE expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
## expr -> expr . DOT IDENTIFIER [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPSUB expr
##

State 15.

mod_: STRING OPSUB WHILE
##
## Ends in an error in state: 14.
##
## expr -> expr OPSUB . expr [ RPAREN OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF ELSE DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr OPSUB
##

State 14.

mod_: STRING WHILE
##
## Ends in an error in state: 57.
##
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD NEWLINES LPAREN IF DOT ]
## stmt_ -> expr . [ NEWLINES ]
##
## The known suffix of the stack is as follows:
## expr
##

State 57.

mod_: WHILE STRING COLON NEWLINES INDENT RPAREN
##
## Ends in an error in state: 48.
##
## block -> NEWLINES INDENT . nonempty_list(stmt) DEDENT [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF ELSE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## NEWLINES INDENT
##

State 48.

mod_: WHILE STRING COLON NEWLINES INDENT STRING NEWLINES RPAREN
##
## Ends in an error in state: 76.
##
## nonempty_list(stmt) -> stmt . [ DEDENT ]
## nonempty_list(stmt) -> stmt . nonempty_list(stmt) [ DEDENT ]
##
## The known suffix of the stack is as follows:
## stmt
##

State 76.

mod_: WHILE STRING COLON NEWLINES WHILE
##
## Ends in an error in state: 47.
##
## block -> NEWLINES . INDENT nonempty_list(stmt) DEDENT [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF ELSE DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## NEWLINES
##

State 47.

mod_: WHILE STRING COLON STRING NEWLINES ELSE COLON WHILE
##
## Ends in an error in state: 60.
##
## orelse -> ELSE COLON . block [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## ELSE COLON
##

State 60.

mod_: WHILE STRING COLON STRING NEWLINES ELSE WHILE
##
## Ends in an error in state: 59.
##
## orelse -> ELSE . COLON block [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## ELSE
##

State 59.

mod_: WHILE STRING COLON STRING NEWLINES RPAREN
##
## Ends in an error in state: 80.
##
## stmt -> WHILE expr COLON block . orelse [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## WHILE expr COLON block
##

State 80.

mod_: WHILE STRING COLON WHILE
##
## Ends in an error in state: 44.
##
## stmt -> WHILE expr COLON . block orelse [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## WHILE expr COLON
##

State 44.

mod_: WHILE STRING WHILE
##
## Ends in an error in state: 43.
##
## expr -> expr . OPAND expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPOR expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPNEQ expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPMUL expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPDIV expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPADD expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . OPSUB expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . IF expr ELSE expr [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## expr -> expr . DOT IDENTIFIER [ OPSUB OPOR OPNEQ OPMUL OPEQ OPDIV OPAND OPADD LPAREN IF DOT COLON ]
## stmt -> WHILE expr . COLON block orelse [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## WHILE expr
##

State 43.

mod_: WHILE WHILE
##
## Ends in an error in state: 5.
##
## stmt -> WHILE . expr COLON block orelse [ WHILE STRING RETURN LPAREN INTEGER IF IDENTIFIER FLOAT EOF DEF DEDENT BOOL ]
##
## The known suffix of the stack is as follows:
## WHILE
##

State 5.

